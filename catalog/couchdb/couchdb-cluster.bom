#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
brooklyn.catalog:
  version: 0.11.0-SNAPSHOT
  name: CouchDB Cluster
  description: A CouchDB cluster blueprint
  license: Apache-2.0
  publish:
    license_code: Apache-2.0
    reference: reference.json
  defaults:
    couchIconUrl: &couchIconUrl https://svn.apache.org/repos/asf/couchdb/supplement/logo/couchdb-logo.png
  iconUrl: *couchIconUrl
  items:
  - id: couchdb-cluster-node
    name: CouchDB cluster node
    iconUrl: *couchIconUrl
    itemType: entity
    item:
      services:
      - type: org.apache.brooklyn.entity.nosql.couchdb.CouchDBNode
        brooklyn.config:
          shell.env:
            EXPANDED_INSTALL_DIR: $brooklyn:attributeWhenReady("expandedinstall.dir")
            USERNAME: $brooklyn:config("couchdb.username")
            PASSWORD: $brooklyn:config("couchdb.password")
            PORT_OBJ: $brooklyn:config("http.port")
            HOST: $brooklyn:attributeWhenReady("host.subnet.address")
          install.version: 2.0.0
          post.customize.command: |

            # replace the node name in the settings
            sudo sed -i "s/couchdb@localhost/couchdb@${HOST}/g" ${EXPANDED_INSTALL_DIR}/rel/couchdb/etc/vm.args

            ~/brooklyn-managed-processes/installs/CouchDBNode_2.0.0/apache-couchdb-2.0.0/rel/couchdb/bin/couchdb > temp.out 2>&1 &
            PID=$!
            sleep 5
            PORT=$(echo ${PORT_OBJ} | sed 's/.*\"port\":\([0-9]*\).*/\1/')
            COUCH=http://localhost:${PORT}

            # create an admin user
            curl -X PUT $COUCH/_node/couchdb@${HOST}/_config/admins/${USERNAME} -d "\"${PASSWORD}\""
            curl -X PUT --user ${USERNAME}:${PASSWORD} $COUCH/_node/couchdb@${HOST}/_config/chttpd/bind_address -d '"0.0.0.0"'

            # stop the database service again
            kill $PID

  - id: couch-coordination-node
    name: "CouchDB coordination node"
    itemType: entity
    iconUrl: *couchIconUrl
    item:
      services:
      - type: child-software-process
        id: couch-coordination-node
        name: "CouchDB coordination node"
        brooklyn.config:
          download.url:
          install.latch: $brooklyn:parent().parent().attributeWhenReady("service.isUp")
          shell.env:
            HOSTNAMES: $brooklyn:parent().parent().attributeWhenReady("cluster.hostnames")
            HOST: $brooklyn:parent().attributeWhenReady("host.subnet.address")
            USERNAME: $brooklyn:config("couchdb.username")
            PASSWORD: $brooklyn:config("couchdb.password")
            PORT_OBJ: $brooklyn:config("http.port")

          install.command: |
            sleep 60
            PORT=$(echo ${PORT_OBJ} | sed 's/.*\"port\":\([0-9]*\).*/\1/')
            COUCH=http://localhost:${PORT}

            # enable cluster mode
            curl -X POST --user ${USERNAME}:${PASSWORD} -H "Content-Type: application/json" $COUCH/_cluster_setup -d "{\"action\": \"enable_cluster\", \"bind_address\":\"0.0.0.0\", \"username\": \"${USERNAME}\", \"password\":\"${PASSWORD}\"}"

            if [ -n "${HOSTNAMES}" ]; then
              # if this is the coordination-node
              IFS=',' read -r -a hostnamearray <<< "${HOSTNAMES}"
              for i in "${hostnamearray[@]}"
              do
                if [ $i != ${HOST} ]; then
                  echo "Adding $i to the cluster"
                  curl -X POST --user ${USERNAME}:${PASSWORD} -H "Content-Type: application/json" $COUCH/_cluster_setup -d "{\"action\": \"enable_cluster\", \"bind_address\":\"0.0.0.0\", \"username\": \"${USERNAME}\", \"password\":\"${PASSWORD}\", \"port\": ${PORT}, \"remote_node\": \"$i\", \"remote_current_user\": \"${USERNAME}\", \"remote_current_password\": \"${PASSWORD}\" }"
                  curl -X POST --user ${USERNAME}:${PASSWORD} -H "Content-Type: application/json" $COUCH/_cluster_setup -d "{\"action\": \"add_node\", \"host\":\"$i\", \"port\": \"${PORT}\", \"username\": \"${USERNAME}\", \"password\":\"${PASSWORD}\"}"
                fi
              done

              # finish the cluster setup
              curl -X POST --user ${USERNAME}:${PASSWORD} -H "Content-Type: application/json" $COUCH/_cluster_setup -d "{\"action\": \"finish_cluster\"}"
            fi
          launch.command: |
            echo true
          checkRunning.command: |
            echo true

  - id: couchdb-cluster
    name: "CouchDB Cluster"
    itemType: template
    iconUrl: *couchIconUrl
    item:
      brooklyn.parameters:
      - name: couchdb.username
        label: CouchDB Admin User
        description: The default CouchDB admin user
        default: admin
      - name: couchdb.password
        label: CouchDB Password
        description: The default CouchDB admin password
        default: password
      - name: couchdb.nodes
        label: CouchDB Password
        description: The number of nodes to start with
        default: 3
      services:
      - type: org.apache.brooklyn.entity.group.DynamicCluster
        name: "Cluster"
        brooklyn.config:
          cluster.initial.size: $brooklyn:config("couchdb.nodes")
          dynamiccluster.firstmemberspec:
            $brooklyn:entitySpec:
              type: couchdb-cluster-node
              brooklyn.config:
                children.startable.mode: BACKGROUND
              brooklyn.children:
                - type: couch-coordination-node
              brooklyn.enrichers:
              - type: org.apache.brooklyn.enricher.stock.Transformer
                brooklyn.config:
                  enricher.triggerSensors:
                  - $brooklyn:sensor("host.subnet.address")
                  - $brooklyn:sensor("http.port")
                  enricher.targetSensor: $brooklyn:sensor("datastore.url")
                  enricher.targetValue:
                    $brooklyn:formatString:
                    - "http://%s:%s"
                    - $brooklyn:attributeWhenReady("host.subnet.address")
                    - $brooklyn:attributeWhenReady("http.port")
                    - type: org.apache.brooklyn.enricher.stock.Transformer
              - type: org.apache.brooklyn.enricher.stock.Transformer
                brooklyn.config:
                  enricher.triggerSensors:
                  - $brooklyn:sensor("host.address")
                  - $brooklyn:sensor("http.port")
                  enricher.targetSensor: $brooklyn:sensor("datastore.url.public")
                  enricher.targetValue:
                    $brooklyn:formatString:
                    - "http://%s:%s"
                    - $brooklyn:attributeWhenReady("host.address")
                    - $brooklyn:attributeWhenReady("http.port")
                    - type: org.apache.brooklyn.enricher.stock.Transformer

          dynamiccluster.memberspec:
            $brooklyn:entitySpec:
              type: couchdb-cluster-node
              brooklyn.enrichers:
              - type: org.apache.brooklyn.enricher.stock.Transformer
                brooklyn.config:
                  enricher.triggerSensors:
                  - $brooklyn:sensor("host.subnet.address")
                  - $brooklyn:sensor("http.port")
                  enricher.targetSensor: $brooklyn:sensor("datastore.url")
                  enricher.targetValue:
                    $brooklyn:formatString:
                    - "http://%s:%s"
                    - $brooklyn:attributeWhenReady("host.subnet.address")
                    - $brooklyn:attributeWhenReady("http.port")
              - type: org.apache.brooklyn.enricher.stock.Transformer
                brooklyn.config:
                  enricher.triggerSensors:
                  - $brooklyn:sensor("host.address")
                  - $brooklyn:sensor("http.port")
                  enricher.targetSensor: $brooklyn:sensor("datastore.url.public")
                  enricher.targetValue:
                    $brooklyn:formatString:
                    - "http://%s:%s"
                    - $brooklyn:attributeWhenReady("host.address")
                    - $brooklyn:attributeWhenReady("http.port")
                    - type: org.apache.brooklyn.enricher.stock.Transformer

        brooklyn.enrichers:
          - type: org.apache.brooklyn.enricher.stock.Aggregator
            brooklyn.config:
              uniqueTag: cluster-hostname-aggregator
              enricher.sourceSensor: $brooklyn:sensor("host.subnet.address")
              enricher.targetSensor: $brooklyn:sensor("cluster.hostname.list")
              enricher.aggregating.fromMembers: true
              enricher.aggregator.excludeBlank: true
          - type: org.apache.brooklyn.enricher.stock.Joiner
            brooklyn.config:
              uniqueTag: cluster-hostname-joiner
              enricher.sourceSensor: $brooklyn:sensor("cluster.hostname.list")
              enricher.targetSensor: $brooklyn:sensor("cluster.hostnames")
              enricher.joiner.quote: false
          - type: org.apache.brooklyn.enricher.stock.Aggregator
            brooklyn.config:
              enricher.aggregating.fromMembers: true
              enricher.transformation.untyped: list
              enricher.sourceSensor: $brooklyn:sensor("datastore.url")
              enricher.targetSensor: $brooklyn:sensor("members.urls")
          - type: org.apache.brooklyn.enricher.stock.Aggregator
            brooklyn.config:
              enricher.aggregating.fromMembers: true
              enricher.transformation.untyped: list
              enricher.sourceSensor: $brooklyn:sensor("datastore.url.public")
              enricher.targetSensor: $brooklyn:sensor("members.urls.public")
          - type: org.apache.brooklyn.enricher.stock.Transformer
            brooklyn.config:
              enricher.triggerSensors:
              - $brooklyn:sensor("cluster.first.entity")
              - $brooklyn:sensor("members.urls")
              enricher.targetSensor: $brooklyn:sensor("datastore.url")
              enricher.targetValue: $brooklyn:entity($brooklyn:attributeWhenReady("cluster.first.entity")).attributeWhenReady("datastore.url")

        brooklyn.policies:
        - type: org.apache.brooklyn.policy.ha.ServiceReplacer